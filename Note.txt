Transient State:
When an object of the Student class is created but not yet saved in the database.
The ID of this object is null in this state.
The object exists only in Java memory.
When save() is called:
First, it checks whether the object is new or has been saved before.
Criteria for detection: Is ID == null?
If yes → the object is new → uses EntityManager.persist().
If no → the object exists → uses EntityManager.merge().
What happens after persist()?
An INSERT is performed in the database.
The object changes state from transient to persistent.
An ID is created by the database for the object (e.g. 1).
Detached State:
After the transaction is committed and the EntityManager is closed, the object is no longer managed.
The object enters the detached state.
Always work only with the returned object after using save(). Depending on the circumstances, it may have been merged and a new object may have been returned.

Objective: Update a Student in the database using the save method
Step 1: Create and save a new entity
Here, a new object of the Student class is created and saved using save.
Behind the scenes, EntityManager.persist() is called.
The object is placed in a detached state; that is, it is detached from the context but its information is stored in the database.
Step 2: Update the entity information
What happens when a Detached entity is saved with save()?
When you have previously saved an entity (for example, Student) in the database and now keep it in Java memory as detached (i.e. outside Hibernates control) and want to save it again using the save() method (which uses EntityManager.merge() behind the scenes), Hibernate goes through the following steps:
1. Checking for the existence of an entity in the Persistence Context
Hibernate first checks:
"Is an entity with the same ID (e.g. id = 1) already managed in memory (the Persistence Context or 1st-level cache)?"
If there isn't one (which is usually the case):
Hibernate sends a SELECT to the database to read the record for that ID.
Result: Hibernate now loads a copy of Student with id = 1 from the database and puts it in persistent state.
Hibernate then copies the data from your detached entity to the newly loaded entity.
In other words: the state of the detached object is transferred to the persistent object.
2. Dirty Checking
Hibernate now checks whether the values of the persistent entity fields have changed since the initial load after copying the data.
If there is a change (such as changing the name Alisa to Alissa):
Hibernate detects that the entity has become "dirty", meaning it needs to be updated.
Hibernate then issues an UPDATE
3. Returning the new entity to the client
After executing merge():
Hibernate removes the persistent object from the context (i.e., detaches it).
The new version of that entity (which now has new information such as name = "Alissa") is returned as the output of the save() method.

Detached Entity (id=1, name="Alissa")   →  save() →  merge() →
→ SELECT student WHERE id = 1 →
→ Load persistent entity from DB →
→ Copy state from detached → persistent →
→ Dirty Checking detects change →
→ UPDATE student SET name='Alissa' WHERE id=1 →
→ Return new detached entity (updated)

Deleting a Detached Object
When delete(returnStudent) is executed, Hibernate faces three problems:
Problem 1: Does this entity actually exist in the database?
Hibernate needs to check whether the record actually exists.
Hibernate first uses EntityManager.find().
This causes a SELECT to be executed to find the record in the database.
Problem 2: The object cannot be deleted because it is Detached!
Hibernate can only delete Entities that are in Persistent state.
If it tries to delete the Detached object directly, we get an Exception:
IllegalArgumentException: Removing a detached instance
Solution: Using merge()
What does Hibernate do?
First it uses merge(returnStudent).
If an Entity with the same ID exists in the Context, it uses it.
If not, it SELECTs again and loads it from the database.
The returnStudent data is copied to that new Entity.
As a result, Hibernate has a new Entity in the Persistent state.
The final step: the actual deletion
Now that we have an Entity in the Persistent state:
Hibernate removes it using EntityManager.remove() .
This executes a DELETE statement in the database.
Important:
The returnStudent object is not deleted.
Instead, Hibernate:
Creates a new copy of it,
Merges the data,
And deletes the new copy.
After the deletion, returnStudent is still in the Detached state!

Are there always two SELECTs?
No. If the following conditions are met, Hibernate may just do a SELECT or even delete without a SELECT:
Case 1: If the same entity is already in context (e.g. still in context after findById())
In that case Hibernate uses the same instance.
No need for merge() and new SELECT.
Just remove() and finally a DELETE.
Case 2: If the entity is in Persistent state (e.g. still alive in the same transaction)
Hibernate directly does remove(), without SELECT

What is Spring Data Commons?
It provides a common foundation for all Spring Data projects, whether for relational or non-relational (NoSQL) databases.
This project defines the main and public Repository interfaces such as Repository, CrudRepository, and PagingAndSortingRepository.

Spring Data JPA and Spring Data Commons Relationship
Spring Data JPA is built on top of Spring Data Commons.
JpaRepository, which is used in JPA projects, itself inherits from PagingAndSortingRepository, which belongs to Spring Data Commons.
Therefore, in addition to CRUD methods, it is possible to use methods related to pagination and sorting.
You can also use CrudRepository or PagingAndSortingRepository directly if you do not need all the features of JpaRepository.

Spring Data MongoDB and Spring Data Commons Relationship
Spring Data MongoDB is also built on Spring Data Commons, similar to JPA.
MongoRepository in Spring Data MongoDB is similar to JpaRepository but is specific to working with MongoDB databases.
This makes working with MongoDB and JPA very similar in terms of API and makes it easier to switch between them.
Spring Data's overall philosophy
Spring Data aims to provide a unified and database-independent programming model.
This allows developers to migrate from relational databases to NoSQL and vice versa without much change in the code.

Creating a custom Repository with custom methods from different interfaces (such as CrudRepository and JpaRepository)
We want to create a Repository called MyCustomRepository that has only these 3 methods
How do we create a Repository that has only these three methods?
MyCustomRepository should only inherit from the base Repository (marker interface) and then define these three custom methods inside itself.
Spring Data JPA creates an implementation for this Repository dynamically (Dynamic Proxy) at runtime that implements those methods.
Why might we want to have only three methods? Why not use the full JpaRepository?
You might not want all the methods to be available to developers.
For example, you don't want to have deleteById because you use soft delete.
You don't want to give the most complete access to specific modules or external APIs.

Named Queries
If you want to define a query in the Entity itself:
Named JPQL Query in the Student entity:

@NamedQuery(
  name = "Student.findByName",
  query = "SELECT s FROM Student s WHERE s.name = :name"
)

Named Native SQL Query:

@NamedNativeQuery(
  name = "Student.findByNameEndingWith",
  query = "SELECT * FROM student WHERE name LIKE %:pattern",
  resultClass = Student.class
)

By default, JUnit 5 creates a new object of the test class for each test method. That is, if your test class has 3 methods, 3 instances of the class will be created.
@TestInstance(TestInstance.Lifecycle.PER_METHOD)

If you want only one object of the test class to be created to execute all test methods, you should write this annotation:
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
The test class is instantiated only once.
You can use non-static fields in the @BeforeAll and @AfterAll methods.

Suppose you want to use a Repository (say StudentRepository) initialized with @Autowired.
In the default case (PER_METHOD):
Because @BeforeAll must be static, you cannot use studentRepository (because static methods do not have access to non-static fields).
But with PER_CLASS:
The @BeforeAll method can be non-static, so you have access to the studentRepository field.
This means you can prepare the database with Repository before running the tests.

If the Repository method is annotated with @Query, the same query will be executed. This has the highest priority.
If @Query is not present, Spring Data JPA checks whether a Named Query with the same name is defined (for example, in the entity class with @NamedQuery). If so, it will be executed.
If neither @Query nor Named Query is defined, then Spring Data JPA attempts to automatically generate and execute a query based on the method name (i.e., a Derived Query).

Query by Example (QBE) is a way in which:
Instead of writing a manual query (like findByLastNameAndLevel)
You create an object of the class you want and pass it to JPA
JPA will search the database for records that are similar to that object
This object is called: "Probe" (like an example that we need to search for)

Step 1: Create a Probe
Suppose you want to find all users who:
lastName = "Smith"
level = 2

User probe = new User();
probe.setLastName("Smith");
probe.setLevel(2);

Step 2: Create an Example
Example<User> example = Example.of(probe);

Step 3: Search with Repository
List<User> result = userRepository.findAll(example);

This line says:
Go get all users with lastName = "Smith" and level = 2.

The problem occurs when you use primitive fields
For example, if you just write:
User probe = new User();
probe.setLastName("Smith");
You think level will be ignored, but no! You are wrong.
Why?
Because level is an int and the default value of int is 0.
It is actually telling JPA:
Look for lastName = "Smith" and level = 0!
And since there is no user with level = 0 in our database, the result is: empty list.
What is the solution? Using ExampleMatcher
We are telling JPA:
Please ignore level, even though it has a default value!

ExampleMatcher matcher = ExampleMatcher.matching()
.withIgnorePaths("level"); // Ignore level field
Example<User> example = Example.of(probe, matcher);
List<User> result = userRepository.findAll(example);

Ignore a specific field .withIgnorePaths("level")
Ignore case .withIgnoreCase()
Match first, middle, or last name? .withMatcher("firstName", startsWith()), contains(), endsWith()

A transaction is a set of operations that are executed as an atomic unit. Either all of those operations are successful, or none of them are successful and all are rolled back to the previous state.
Suppose you have a ticket booking application. When a user makes a ticket reservation, a seat must first be assigned to him and then the payment must be made. If the payment fails, the seat must not be reserved for him. This is possible using a "transaction".
Commit:
This means that all the operations within the transaction have been completed successfully and now the database must save those changes and make them visible to other users.
Rollback:
This means that an error has occurred and the changes made must be rolled back to the previous state; no trace of that operation remains in the database.

Basic properties of a transaction (ACID)
1. Atomicity
All operations in a transaction must be completed completely or none of them.
Example:
Suppose you are transferring money from your bank account to someone else's account.
The two main operations are:
Money decreases in your account
Money increases in the other party's account
If only one of them happens (for example, money decreases in your account but does not reach the other party's account), it is a disaster!
Atomicity guarantees that either both happen, or neither happens.

2. Consistency
The database must remain in a valid state before and after the transaction.

Example:
Suppose there is a rule in the database that the account balance should never become negative.
If this rule is violated during the transaction, the entire transaction must be canceled.
Consistency means that after the transaction is executed, the data is still consistent with the rules of the system.

3. Isolation
Transactions should not affect each other or have incomplete results.
Example:
Suppose two people are simultaneously reserving a specific seat in a ticketing system.
If the transactions are not isolated, both people could end up buying the same seat!
Isolation prevents this from happening. Each transaction is executed as if in its own space.

4. Durability
Once a transaction is successfully committed, the data should persist forever, even if the system crashes or loses power.
Example:
If a user purchases a ticket and the system shuts down after a few moments, the ticket should still be recorded in the database.
Durability means that the database retains that information as soon as the transaction is committed.
